require "logger"
require "optparse"
require "set"
require "tmpdir"
require "yaml"
require 'rexml/document'
include REXML

require File.expand_path(File.dirname(__FILE__) + '/sync_jenkins_common.rb')

ADMIN_MEMBER_PATH = "hudson/authorizationStrategy/roleMap[@type='globalRoles']/role[@name='    admin']/assignedSIDs/sid"
ROLE_PATH = "hudson/authorizationStrategy/roleMap[@type='projectRoles']/role"

def fetch_jenkins_config(logger, jenkins_ip)
  jenkins_config_dir = Dir.mktmpdir
  config_local_copy = File.expand_path("config.xml", jenkins_config_dir)
  cmd = ["rsync -e ssh -az ",
         "vcap@#{jenkins_ip}:/var/vcap/store/jenkins/config.xml",
         config_local_copy].join(" ")
  system!(logger, cmd)
  config_local_copy
end

def sync_role_info(logger, manifest_path, jenkins_config)
  manifest = YAML.load_file(manifest_path)
  config_xml = Document.new(File.new(jenkins_config))

  # sync admin members
  admins = Array.new
  config_xml.each_element(ADMIN_MEMBER_PATH){ |admin|
    admins.push(admin.text)
  }
  manifest['properties']['jenkins']['admins'] = admins

  # sync roles
  role_setting = Array.new
  config_xml.each_element(ROLE_PATH){ |role|
    members = Array.new
    role.each_element("assignedSIDs/sid"){ |member|
      members.push(member.text)
    }
    role_setting.push({'name' => role.attributes['name'], 'regex' => role.attributes['pattern'], 'members' => members.join(",") })
  }
  manifest['properties']['jenkins']['views'] = role_setting

  # save updated manifest yaml
  File.open(manifest_path, 'w') do |out|
     YAML.dump(manifest, out)
  end

  # remove trailing blankspace generated by YAML.dump
  system!(logger, "sed -i 's/[ \t]*$//' #{manifest_path}")
end


opts = {
  :verbose => false,
}

opt_parser = OptionParser.new do |op|
  op.banner = "Synchronize live Jenkins job configs with a release repo\n\n"

  op.on("-v", "--verbose", "Print debugging information") do
    opts[:verbose] = true
  end

end
opt_parser.parse!(ARGV)

unless ARGV.length == 1
  puts "Usage: sync_jenkins_roles.rb [/path/to/deployment_manifest]"
  puts
  puts opt_parser.help
  exit 1
end

logger = Logger.new(STDOUT)
if opts[:verbose]
  logger.level = Logger::DEBUG
else
  logger.level = Logger::INFO
end

manifest_path = ARGV[0]

begin
  jenkins_ip = parse_jenkins_ip(manifest_path)
  logger.info("Found jenkins ip: #{jenkins_ip}")

  jenkins_config = fetch_jenkins_config(logger, jenkins_ip)
  logger.info("Fetch jenkins config")

  sync_role_info(logger, manifest_path, jenkins_config)
  logger.info("Synchronizing role information")

  logger.info("Done")
rescue => e
  logger.error(e.to_s)
  logger.debug(e.backtrace.join("\n")) if e.backtrace
end
